# Необходимо реализовать класс Stack со следующими методами:
# isEmpty - проверка стека на пустоту. Метод возвращает True или False.
# push - добавляет новый элемент на вершину стека. Метод ничего не возвращает.
# pop - удаляет верхний элемент стека. Стек изменяется. Метод возвращает верхний элемент стека
# peek - возвращает верхний элемент стека, но не удаляет его. Стек не меняется.
# size - возвращает количество элементов в стеке.


class Stack(list):  

  def isEmpty(self):
    '''isEmpty - проверка стека на пустоту. Метод возвращает True или False.'''    
    if len(self) == 0:
      return False
    else:
      return True

  def push(self, a):
    '''push - добавляет новый элемент на вершину стека. Метод ничего не возвращает.'''
    self.append(a)

  def pop(self):
    '''# pop - удаляет верхний элемент стека. Стек изменяется. Метод возвращает верхний элемент стека'''
    if len(self) == 0:
      return False
    b = self[len(self) - 1]
    del self[len(self) - 1]
    return b
    # self.pop(len(self) - 1)
  
  def peek(self):
    '''peek - возвращает верхний элемент стека, но не удаляет его. Стек не меняется.'''
    if len(self) == 0:
      return
    return self[len(self) - 1]

  def size(self):
    '''size - возвращает количество элементов в стеке.'''
    return len(self)

  
# Используя стек из задания 1 необходимо решить задачу на проверку сбалансированности скобок. Сбалансированность скобок означает, что каждый открывающий символ имеет соответствующий ему закрывающий, и пары скобок правильно вложены друг в друга.
# Пример сбалансированных последовательностей скобок:
# (((([{}]))))
# [([])((([[[]]])))]{()}
# {{[()]}}
# Несбалансированные последовательности:
# }{}
# {{[(])]}}
# [[{())}]
# Программа ожидает на вход строку со скобками. На выход сообщение: "Сбалансированно", если строка корректная, и "Несбалансированно", если строка составлена неверно.

def check(b):
  c = Stack()  
  if b[-1] == '(' or b[-1] == '[' or b[-1] == '{':
      return 'Несбалансированно'
  if b[0] == ')' or b[0] == ']' or b[0] == '}':
      return 'Несбалансированно'
  for i in b:
    if i == '(':
      c.push(')')
    elif i == '[':
      c.push(']')
    elif i == '{':
      c.push('}')
    elif i == ')':
      if i == c[-1]:
        c.pop()
      else:
        return 'Несбалансированно'
    elif i == ']':
      if i == c[-1]:
        c.pop()
      else:
        return 'Несбалансированно'
    elif i == '}':
      if i == c[-1]:
        c.pop()
      else:
        return 'Несбалансированно'
    else:
      return 'Несбалансированно'    
  return 'Сбалансированно'


a = '(((([{}]))))'
b = '[([])((([[[]]])))]{()}'
c = '{{[()]}}'
d = '}{}'
e = '{{[(])]}}'
f = '[[{())}]'
print(check(a))
print(check(b))
print(check(c))
print(check(d))
print(check(e))
print(check(f))